package com.example.demo;


import com.example.demo.utils.AESUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.util.Base64Utils;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;

@Slf4j
public class Test {

    public static final String KEY = "tencent_smmember";

    private static final String KEY_ALGORITHM = "AES";
    private static final String DEFAULT_CIPHER_ALGORITHM = "AES/ECB/PKCS5Padding";//默认的加密算法

    public static void main(String[] args) throws SecurityException, NoSuchMethodException {
        SecretKeySpec secretKey = AESUtil.getSecretKey();
        String aesSecretKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());
        String content = "故事的小黄花";
        String encrypt = AESUtil.encrypt(content,secretKey);
        log.info(encrypt);
        String decrypt = AESUtil.decrypt(encrypt,secretKey);
        log.info("加解密结果:{}", content.equals(decrypt) ? "成功" : "失败");
        byte[] secretKeyArray = Base64.getDecoder().decode(aesSecretKey);
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKeyArray, KEY_ALGORITHM);

        String decrypt2 = AESUtil.decrypt(encrypt,secretKeySpec);
        log.info("加解密结果:{}", content.equals(decrypt2) ? "成功" : "失败");
        String str = "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";
        System.out.println(str.length());
    }

}
